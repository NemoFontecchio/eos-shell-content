#!/usr/bin/python3
# -*- Mode: Python; indent-tabs-mode: nil -*-

from collections import OrderedDict
from configparser import ConfigParser
import json
from eosshellcontent import ShellContent
import os
import re
import shutil
import sys

CONTENT_FILE = '/usr/share/eos-shell-content/content.json'

class NoAppException(Exception):
    def __init__(self, appid):
        self.appid = appid
    def __str__(self):
        return 'App ID "{0}" not found in {1}'.format(self.appid, CONTENT_FILE)

class NoDesktopException(Exception):
    def __init__(self, appid, desktop):
        self.appid = appid
        self.desktop = desktop
    def __str__(self):
        return 'No desktop file for app {0} found at "{1}"'.format(self.appid,
                                                                   self.desktop)

class App(object):
    # Fields that are present in CMS, but preferred from upstream
    IGNORED_FIELDS = ['Exec', 'TryExec', 'MimeType', 'Categories']

    def __init__(self, appid, verbose=False):
        self.appid = appid
        self.verbose = verbose
        self.content = None

        # See if this appid is in content.json
        self.verbose_print('Checking for app ID', self.appid, 'in',
                           CONTENT_FILE)
        with open(CONTENT_FILE) as cf:
            content = json.load(cf)

            # If this app ID has a language suffix, also try with the
            # suffix removed
            altid = None
            langmatch = re.search('(.*)-([a-z][a-z](_[A-Z][A-Z])?)$',
                                  self.appid)
            if langmatch:
                altid = langmatch.group(1)
                self.verbose_print('Also trying alternate ID', altid)

            for app in content:
                content_id = app['application-id']
                if content_id in [self.appid, altid]:
                    self.content = app
                    if content_id == altid:
                        self.appid = altid
                        self.verbose_print('Using alternate app ID',
                                           self.appid)
                    break

        if self.content is None:
            raise NoAppException(self.appid)

    def verbose_print(self, *args, **kwargs):
        if self.verbose:
            print(*args, file=sys.stderr, **kwargs)

    def merge_desktop_file(self, outpath, inplace=False):
        # Find the content desktop file
        inpath = '/usr/share/eos-shell-content/bundle/desktops/' + \
            self.appid + '.desktop'
        if not os.path.exists(inpath):
            raise NoDesktopException(self.appid, inpath)
        self.verbose_print('Using input desktop file', inpath)

        # Read the desktop files. We have to override the optionxform
        # method so that it doesn't lowercase all the options
        indesktop = ConfigParser(interpolation=None)
        indesktop.optionxform = str
        with open(inpath, encoding='utf-8') as df:
            indesktop.read_file(df)
        outdesktop = ConfigParser(interpolation=None)
        outdesktop.optionxform = str
        with open(outpath, encoding='utf-8') as df:
            outdesktop.read_file(df)

        inentry = indesktop['Desktop Entry']
        outentry = outdesktop['Desktop Entry']

        # Keep track of the original upstream English name
        origname = outentry['Name']

        # Copy fields from the content file, with some exceptions
        for field in inentry.keys():
            if field in self.IGNORED_FIELDS:
                # Prefer these from the upstream source
                pass
            else:
                # Copy the field
                outentry[field] = inentry[field]

        # Add the X-Endless-Merged field
        outentry['X-Endless-Merged'] = 'true'

        # Reorder the fields such that all translated "Name[..]" keys
        # are sorted and immediately follow the original "Name" key,
        # but maintain the original order for all other keys.
        names = OrderedDict()
        others = OrderedDict()
        for item in outentry.items():
            if item[0].startswith('Name['):
                # Exclude any instances of the original English name,
                # (ignoring capitalization), so that those translations
                # will fall back to our preferred English name instead
                if item[1].lower() != origname.lower():
                    names.update([item])
            elif item[0].startswith('Icon['):
                # Exclude any localized icons so as not to
                # override the Endless-provided icon
                pass
            else:
                others.update([item])
        names = OrderedDict(sorted(names.items(), key=lambda t: t[0]))
        outentry = OrderedDict()
        for item in others.items():
            outentry.update([item])
            if item[0] == 'Name':
                outentry.update(names)
        outdesktop['Desktop Entry'] = outentry

        # Output the desktop file
        if inplace:
            self.verbose_print('Updating', outpath)
            with open(outpath + '.tmp', 'w', encoding='utf-8') as tmp:
                outdesktop.write(tmp, space_around_delimiters=False)
            shutil.copymode(outpath, outpath + '.tmp')
            os.rename(outpath + '.tmp', outpath)
        else:
            self.verbose_print('Updated desktop file follows:')
            outdesktop.write(sys.stdout, space_around_delimiters=False)

    def merge_appdata_file(self, outpath, inplace=False):
        shell_content = ShellContent()
        xml = shell_content.update_appdata_from_file(outpath, self.appid)

        if inplace:
            self.verbose_print('Updating', outpath)
            with open(outpath + '.tmp', 'w', encoding='utf-8') as tmp:
                tmp.write(xml)
            shutil.copymode(outpath, outpath + '.tmp')
            os.rename(outpath + '.tmp', outpath)
        else:
            self.verbose_print('Updated appdata file follows:')
            sys.stdout.write(xml)

if __name__ == '__main__':
    from argparse import ArgumentParser

    parser = ArgumentParser(description='Merge Endless content into files')
    parser.add_argument('-i', '--in-place', action='store_true',
                        help='Update desktop file in place')
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='Output verbose messages')
    parser.add_argument('-a', '--appdata', help='App-data file to merge')
    parser.add_argument('appid', help='App ID to merge')
    parser.add_argument('-d', '--desktop', help='Desktop file to merge')
    args = parser.parse_args()

    app = App(args.appid, args.verbose)

    if not args.desktop and not args.appdata:
        sys.stderr.write('Please specify either the desktop or appdata arguments!\n')
        exit(1)

    if args.desktop:
        app.merge_desktop_file(args.desktop, args.in_place)
    if args.appdata:
        app.merge_appdata_file(args.appdata, args.in_place)
